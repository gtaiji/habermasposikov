The felt-sense of coding

Dealing with the code reveals a few pivotal points of inherent beauty.
1. Code can be interpreted as the life situation characterised by high precision of each act and intention. Compilation is hardly vague as it reflects the language patterns and executes the code as it is. The shift of meaning caused by interpretation is minimal (might be not the same for the natural languages). Machine will do what you say – what you’ve said indeed. It reveals unsaid word and unexpressed patterns. Typicality, replication and high precision of errors leaves an open space for felt sense right between the strings – before the face of compilation. Due to the high grade of honesty the process of working with code feels close to tuishou («pushing hands»).
2. The code is not formal. Machine delivers full and literal interpretation of language. Machine acts like a mirror being sensitive. It listens to all the things you say. It grants high quality of freedom implied for respecting the rules of language – the rules of how you could call the machine. An ability to call for determined things and events reminds of judicial procedure under the Roman law, though the code is deemed to be way more elegant.
3. The code is not formal, so creation of it is not purely technical. Creation of it empowers imagination as for an every second of the process you are to be aware of feelings and insights revealed beyond the strings of the code – and the code as the one. Without this sort of awareness the feel of structure gets lost. The code shuts down getting vague and hermetic.
4. There are notorious cases, for which IDEs and compilers give out dozens and even hundreds of errors, while running through debugging process. The imminent consequence of code’s open texture is harshness of an encounter with the real situation and real conditions of it. There are a few methods to work out an encounter. 
5. The first way to work with the task is to follow the compiler. There were 10 errors, some of them are fixed now, we have 9 errors, then 8 etc. The method is working. At the same time, the method feels like destructive as far as the wishful result, or the «fixed» error, is faced in exchange for a certain amount of freedom. Freedom of a program to do any possible thing. Correlation between the program and intention beyond this program shall be determined by the felt sense of the software architecture (not by a bunch of occasional tests or attempts to compile).
6. The second way – do not compile anything, do it never, and forget about the button that starts debugging. Do not push the button. You can find it by feeling, grabble, simulate, reconstitute the issue – the algorithm. You can imagine it from the very beginning. What do you want from the machine? Which design would your like to experience? What are the taste, colour and speed? What is to happen? How to catch your joy? How can you make it elegant? There has been no code yet. No language. What shall happen form the very beginning? How do the things go on?
7. It is beautiful to see and feel the programme, which is complied once and only once. The whole debugging process is set up in the realm of imagination as the form of rediscovered blueprint, intention, and fellowship.

//

Работа с программным кодом имеет несколько красивых моментов:
 1. Код моделирует ситуацию реальности, где действие максимально точно – с минимальным люфтом интерпретации – отражается в мире. Машина сделает именно то, что ты ей сказал, и проявит, что осталось несказанным. Типичность, повторяемость точно отражаемых ошибок позволяет искать ощущаемые смыслы между строк компилятора. Этим уровнем честности работа с кодом напоминает туйшоу.
 2. Код не формалистичен, поскольку в силу буквальности и полноты языкового отражения машина является чуткой – слушает всё от и до. Это высокий уровень свободы при уважении к правилам языка – к правилам того, как именно обращаться к машине. Вызов определённых явлений посредством запросов к ней напоминает судебные формулы в римском праве, но ощущается элегантнее.
 3. Поскольку код не формалистичен, процесс его создания не только и не столько технический. Он включает воображение, потому что каждую секунду процесса важно чувствовать, что стоит за каждой строкой, и что стоит за всем этим. Без этого чувство структуры быстро уходит, а без него код быстро закрывается и становится герметичным.
 4. Известны истории, когда при компиляции машина сообщает о десятках и сотнях ошибок. Следствием того, насколько буквально код отражается в реальности, является жёсткость встречи с реальной ситуацией.
 5. При подобного рода столкновении я вижу несколько инструментов. Первый способ работать с задачей – прислушаться к компилятору. Было 10 ошибок, поправили, стало 9 ошибок, затем 8 и др. Это работающий, но несколько разрушительный метод, поскольку ценой исправления «той самой» ошибки становится часть изначальной свободы программы делать всё, что угодно. Соответствие программы намерению определяется не тестовой выборкой случаев, а их ощущаемым смыслом в архитектуре программы.
 6. Второй способ отсюда: не компилировать ничего до последнего. Забыть про эту кнопку, не трогать её. И нащупать, воспроизвести, нарисовать весь алгоритм в уме. Представить всё от и до. Чего ты хочешь от машины? Какой у этого дизайн? Какие у этого вкус, цвет, скорость? Что должно происходить? Как сделать это радостно? Как сделать это изящно? Если ещё нет никакого кода, никакого языка? Что происходит тогда, с чего всё начинается? Что происходит потом?
 7. Красиво вообразить и воплотить такую программу, которая компилируется и запускается с первого раза, тогда как весь процесс отладки существует в воображении как намерение, замысел и форма общения.
